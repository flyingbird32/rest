#include <iostream>
#include "rest.h"

// example form parser generated by chat gtp
std::unordered_map<std::string, std::string> parseFormBody(const std::string& body)
{
    std::unordered_map<std::string, std::string> parsed;
    std::stringstream bodyStream(body);
    std::string pair;

    while (std::getline(bodyStream, pair, '&'))
    {
        size_t delimiterPos = pair.find('=');
        if (delimiterPos != std::string::npos)
        {
            std::string key = pair.substr(0, delimiterPos);
            std::string value = pair.substr(delimiterPos + 1);
            parsed[key] = value;
        }
    }

    return parsed;
}

Endpoint loginPage(Request& request)
{
    // could be read from file
    std::string loginHtml = R"(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>login</title>
</head>
<body>
    <h1>Login</h1>
    <form action="/login" method="post">
        <label for="username">username:</label>
        <input type="text" id="username" name="username" required>
        <br><br>
        <label for="password">password:</label>
        <input type="password" id="password" name="password" required>
        <br><br>
        <button type="submit">login</button>
    </form>
</body>
</html>
)";

    request.response.setBody(loginHtml);
    return Endpoint(HTTP_STATUS_CODE::OK, CONTENT_TYPE::TEXT_HTML);
}

Endpoint dashboardPage(Request& request)
{
    request.response.setBody("<h1>welcome to dashboard</h1>");
    return Endpoint(HTTP_STATUS_CODE::OK, CONTENT_TYPE::TEXT_HTML);
}

Endpoint mainPage(Request& request)
{
    // could be read from file
    std::string mainPage = R"(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>main</title>
</head>
<body>
    <button onclick="window.location.href='/login'">login</button>
</body>
</html>
)";

    request.response.setBody(mainPage);
    return Endpoint(HTTP_STATUS_CODE::OK, CONTENT_TYPE::TEXT_HTML);
}

Endpoint loginRequest(Request& request)
{
    auto formData = parseFormBody(request.body);
    std::string username = formData["username"];
    std::string password = formData["password"];

    if (username == "admin" && password == "password")
    {
        request.response.addHeader("Location", "/dashboard");
        // set auth token or something idk
        return Endpoint(HTTP_STATUS_CODE::FOUND, CONTENT_TYPE::TEXT_HTML);
    }

    request.response.setBody("<h1>invalid credentials</h1>");
    return Endpoint(HTTP_STATUS_CODE::UNAUTHORIZED, CONTENT_TYPE::TEXT_HTML);
}

class TestController : public BaseController 
{
public:
    TestController() 
    {
        registerEndpoint("/hello", HTTP_METHOD::GET, &TestController::exampleEndpoint);
    }

private:
    static Endpoint exampleEndpoint(Request& request) 
    {
        request.response.setBody("hi!");
        return  Endpoint(HTTP_STATUS_CODE::OK, CONTENT_TYPE::TEXT_PLAIN);
    }
};

int main()
{
    rest::Service service;
    service.logConnections(true);
    service.registerEndpoint("/", HTTP_METHOD::GET, mainPage);
    service.registerEndpoint("/login", HTTP_METHOD::GET, loginPage);
    service.registerEndpoint("/login", HTTP_METHOD::POST, loginRequest);
    service.registerEndpoint("/dashboard", HTTP_METHOD::GET, dashboardPage);

    TestController testController;
    service.registerController("/class", &testController);

    service.start(80);

    return 0;
}